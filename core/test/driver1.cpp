#include <iostream>
#include "lab6.h"

using namespace std;

int main(int argc, char **argv) {
    if (argc == 1 || argv[1][1] == '1') {
        cerr << "This testcase checks tank move, bullet generation and bullet move." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 19, 19, D_Right, D_Left);
        cerr << "INIT (0, 0) (12, 12), RIGHT LEFT" << endl << game.draw();
        auto map = game.getMap();
        cerr << "GETMAP" << endl;
        cerr << "CHECKPOINT 1" << endl;
        if (map.block[5][5] != B_Tank_A) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl << game.draw();
        map = game.getMap();
        cerr << "GETMAP" << endl;
        cerr << "CHECKPOINT 2" << endl;
        if (map.block[5][6] != B_Tank_A || map.block[5][7] != B_Bullet) cout << "Something Wrong Happens in Checkpoint 2" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        map = game.getMap();
        cerr << "GETMAP" << endl;
        cerr << "CHECKPOINT 3" << endl;
        if (map.block[5][6] != B_Tank_A || map.block[5][7] != B_Blank || map.block[5][9] != B_Bullet) cout << "Something Wrong Happens in Checkpoint 3" << endl;
        return 0;
    } else if (argv[1][1] == '2') {
        cerr << "This testcase checks bullet life point deduction and bullet delete." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 2, 0, D_Right, D_Right);
        cerr << "INIT (0, 0) (2, 0) RIGHT RIGHT" << endl << game.draw();
        game.addBullet({0, 0}, D_Right);
        cerr << "ADDBULLET (0, 0) RIGHT" << endl;
        Turn status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 1" << endl;
        if (status != T_Cont) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        game.addBullet({0, 0}, D_Right);
        cerr << "ADDBULLET (0, 0) RIGHT" << endl;
        status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 2" << endl;
        if (status != T_Cont) cout << "Something Wrong Happens in Checkpoint 2" << endl;
        game.addBullet({0, 0}, D_Right);
        cerr << "ADDBULLET (0, 0) RIGHT" << endl;
        status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 3" << endl;
        if (status != T_B_Win) cout << "Something Wrong Happens in Checkpoint 3" << endl;
        return 0;
    } else if (argv[1][1] == '3') {
        cerr << "This testcase checks bullet life point deduction together with bullet generation and cool down." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 2, 0, D_Right, D_Right);
        cerr << "INIT (0, 0) (2, 0) RIGHT RIGHT" << endl << game.draw();
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        Turn status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 1" << endl;
        if (status != T_Cont) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        Map map = game.getMap();
        cerr << "GETMAP" << endl;
        if (map.block[5][9] != B_Blank) cout << "Something Wrong Happens in Checkpoint 2" << endl;
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 2" << endl;
        if (status != T_Cont) cout << "Something Wrong Happens in Checkpoint 2" << endl;
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        game.turn();
        status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 3" << endl;
        if (status != T_Cont) cout << "Something Wrong Happens in Checkpoint 3" << endl;
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 4" << endl;
        if (status != T_A_Win) cout << "Something Wrong Happens in Checkpoint 4" << endl;
        return 0;
    } else if (argv[1][1] == '4') {
        cerr << "This testcase checks border life point deduction." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 1, 1, D_Right, D_Right);
        cerr << "INIT (0, 0) (1, 1) RIGHT RIGHT" << endl << game.draw();
        game.setBorder(1);
        cerr << "SETBORDER 1" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        Turn status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 1" << endl;
        if (status != T_B_Win) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        return 0;
    } else if (argv[1][1] == '5') {
        cerr << "This testcase checks border shrink mechanism." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 1, 1, D_Right, D_Right);
        cerr << "INIT (0, 0) (1, 1) RIGHT RIGHT" << endl << game.draw();
        Map map = game.getMap();
        cerr << "GETMAP" << endl;
        cerr << "CHECKPOINT 1" << endl;
        if (map.border != 0) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        map = game.getMap();
        cerr << "GETMAP" << endl;
        cerr << "CHECKPOINT 1" << endl;
        if (map.border != 1) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.turn();
        cerr << "TURN" << endl << game.draw();
        map = game.getMap();
        cerr << "GETMAP" << endl;
        cerr << "CHECKPOINT 2" << endl;
        if (map.border != 2) cout << "Something Wrong Happens in Checkpoint 2" << endl;
        return 0;
    } else if (argv[1][1] == '6') {
        cerr << "This testcase checks crash draw." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 1, 1, D_Right, D_Up);
        cerr << "INIT (0, 0) (1, 1) RIGHT UP" << endl << game.draw();
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        Turn status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 1" << endl;
        if (status != T_Draw) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        return 0;
    } else if (argv[1][1] == '7') {
        cerr << "This testcase checks crash win." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 1, 1, D_Right, D_Up);
        cerr << "INIT (0, 0) (1, 1) RIGHT UP" << endl << game.draw();
        game.addBullet({0, 0}, D_Right);
        cerr << "ADDBULLET (0, 0) RIGHT" << endl;
        game.turn();
        cerr << "TURN" << endl << game.draw();
        game.move(Tank_A, M_Straight);
        cerr << "MOVE A STRAIGHT" << endl;
        game.move(Tank_B, M_Straight);
        cerr << "MOVE B STRAIGHT" << endl;
        Turn status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 1" << endl;
        if (status != T_B_Win) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        return 0;
    } else if (argv[1][1] == '8') {
        cerr << "This testcase checks tank moving." << endl;
        Game &game = *getMyGame();
        game.initialize(0, 0, 1, 1, D_Up, D_Right);
        cerr << "INIT (0, 0) (1, 1) UP RIGHT" << endl << game.draw();
        game.move(Tank_A, M_Right);
        cerr << "MOVE A RIGHT" << endl;
        game.move(Tank_B, M_Left);
        cerr << "MOVE B LEFT" << endl;
        Turn status = game.turn();
        cerr << "TURN" << endl << game.draw();
        cerr << "CHECKPOINT 1" << endl;
        if (status != T_Draw) cout << "Something Wrong Happens in Checkpoint 1" << endl;
        return 0;
    }
}
